/* Arthur Böckmann Grossi (275607), Cassiano Translatti Furlani(278038) e Ian Fischer Schilling(275603) */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../include/t2fs.h"
#include "../include/bitmap2.h"
#include "../include/apidisk.h"
#include "../include/functions.h"

#define MAX_STU_CHAR 100
#define STU1 "Arthur Bockmann Grossi - 275607"
#define STU2 "Cassiano Translatti Furlani - 278038"
#define STU3 "Ian Fischer Schilling - 275603"

#define MAX_PATH_NAME_SIZE 301	//CECHIN falou em aula que o maior caminho sera 4 diretorios aninhados, para garantir calculamos para 5 diretorios.


int identify2 (char *name, int size){
	char student[MAX_STU_CHAR] = "";
	int i;
	int st2 = strlen(STU1);
	int st3 = st2 + strlen(STU2);
	int letters;
	strcat(student, STU1);
	strcat(student, STU2);
	strcat(student, STU3);
	if(size >= MAX_STU_CHAR){ //Size is equal to or greater than students names
		for( i = 0; i < MAX_STU_CHAR; i++)
			name[i] = student[i];
		return 0;
	}
	else if( size >= 9){ //At least 1 characters for each
		letters = (int)size/3 - 2;
		for(i = 0; i < letters; i++){
			name[i] = student[i];
			name[i + letters + 1] = student[i + st2];
			name[i + 2*(letters + 1)] = student[i + st3];
		}
		name[letters] = '\n';
		name[2*(letters) +1]= '\n';
		name[i + 2*(letters + 1) + 1] = '\0';
	}
	return -1;
}

FILE2 create2 (char *filename){
	fileHandler file;
	struct coordinates info;
	int d=0;
	char abspath[MAX_PATH_NAME_SIZE];


	if(!systemReady)
		setup();
	info = getReg(filename);
	if(info.record.TypeVal == TYPEVAL_INVALIDO){ //nome valido, nao utilizado ainda
		do{
			if(openedFiles[d].type == TYPEVAL_INVALIDO){
				openedFiles[d].type == TYPEVAL_REGULAR;
				openedFiles[d].currentPointer = 0;
				if(absolutePath(abspath, filename)){
					printf("ERROR, could not convert filename to absolutePath! (function: create2) \n");
					return -1;
				}
				strcpy(openedFiles[d].fullPathName, abspath);
				struct t2fs_inode newFileInode;
				
				newFileInode.blocksFileSize = 0;
				newFileInode.bytesFileSize = 0;
				newFileInode.dataPtr[0] = INVALID_PTR;
				newFileInode.dataPtr[1] = INVALID_PTR;
				newFileInode.singleIndPtr = INVALID_PTR;
				newFileInode.doubleIndPtr = INVALID_PTR;
				
				openedFiles[d].inode = newFileInode;
				openedFiles[d].numInode = searchBitmap2(BITMAP_INODE, 0);
				setInode(newFileInode, openedFiles[d].numInode);
				
				struct t2fs_record newReg;
				char *token;
				char lastoken[59];
				char *auxpath = malloc(strlen(filename)+1);
				
				//nome é só o ultimo argumento do filename
				newReg.TypeVal = TYPEVAL_REGULAR;
				token = strtok(auxpath, "/");
				strcpy(lastoken, token);
				while(token!=NULL){
					token = strtok(NULL, "/");
					strcpy(lastoken, token);
				}
				
				strcpy(newReg.name[59], lastoken);
				newReg.inodeNumber = openedFIles[d].numInode;
				
				if(setReg(newReg, filename)){
					printf("ERROR, could not create new record inside directory (function: create2) \n");
					return -1;
				}	
				return d;	//handle do arquivo == posicao dele no vetor de arquivos abertos
			}
			d++;
		}while(d<10);
		
		printf("ERROR, there was already 10 opened files! (function: create2)\n");
		return -1;
		
	}else{
		printf("ERROR, there are other file(s) with the same name in this directory! (function: create2)\n");
		return -1;
	}
}

int delete2 (char *filename){
  struct coordinates fileCoord = getReg(filename);
  struct t2fs_record fileReg = fileCoord.record;
  DWORD fileInode = fileReg.inodeNumber;
  
  if( isFileOpen(fileInode)){
    printf("Tried to delete an open file\n");
    return -1;
  }
  
  if(fileReg.TypeVal == TYPEVAL_INVALIDO){
    printf("Tried to delete an invalid file\n");
    return -1;
  }
  
  if(fileReg.TypeVal == TYPEVAL_DIRETORIO){
    printf("Tried to delete a directory\n");
    return -1;
  }
  /*It is a real file, now we can delete it*/
  
  if( delBlocks(fileInode, -1) ){
    printf("Error deleting blocks in delete2\n");
    return -1;
  }
  /*Now we free the inode*/
  if( setBitmap2(BITMAP_INODE, fileInode, 0) ){
    printf("Error setting inode bitmap in delete2\n");
    return -1;
  }
  
  fileReg.TypeVal == TYPEVAL_INVALIDO;
  strcpy(fileReg.name, '\0');
  fileReg.inodeNumber = INVALID_PTR;
  /*We now must change the file record*/
  if( setReg(fileReg, filename) ){
    printf("Error setting file record in delete2\n");
    return -1;
  }
  
  

}

FILE2 open2 (char *filename){
	struct coordinates reg;
	struct t2fs_inode inode;
	char *abspath;
	
	
  reg = getReg(filename);
	
	if(reg.record.TypeVal == TYPEVAL_INVALIDO){
			printf("ERROR: file not found!\n");
			return -1;
	}

	int i=0;
	//searches for the next free openedFiles
	while((i<10) && (openedFiles[i].type == TYPEVAL_INVALIDO))
		i++;

	if(i >= 10){
		printf("ERROR: openedFiles is full!\n");
		return -1;
	}
	
	if(absolutePath(abspath, filename)){
		printf("ERROR, could not convert filename to absolutePath! (function: open2) \n");
		return -1;
	}
	strcpy(openedFiles[i].fullPathName, abspath);	
	openedFiles[i].type = TYPEVAL_REGULAR;
	openedFiles[i].currentPointer = 0;
	inode = getInode(reg.record.inodeNumber);
	openedFiles[i].inode = inode;
	openedFiles[i].numInode = reg.record.inodeNumber;
	
	return i;
}

int close2 (FILE2 handle){
	fileHandler *file;
	file = &(openedFiles[handle]);

	if (file->type != TYPEVAL_REGULAR){
			printf("ERROR: handle file not found!\n");
			return -1;
	}

	file->fullPathName[0] = '\0';
	file->type = TYPEVAL_INVALIDO;
	return 0;
}

int read2 (FILE2 handle, char *buffer, int size){
	/* TO-DO */
}

int write2 (FILE2 handle, char *buffer, int size){
	/* TO-DO */
}

int truncate2 (FILE2 handle){
  fileHandler truncFile;
   
  if(handle < 0 || handle >10){
    printf("Error invalid handle in truncate2\n");
    return -1;
  }
	truncFile = openedFiles[handle];  
  
  if(fileReg.TypeVal == TYPEVAL_INVALIDO){
    printf("Tried to truncate an invalid file\n");
    return -1;
  }
  
  if(fileReg.TypeVal == TYPEVAL_DIRETORIO){
    printf("Tried to truncate a directory in trunc2\n");
    return -1;
  }
  /*It is a real file, now we can truncate it*/
  
  if( delBlocks(truncFile.numInode, truncFile.currentPointer) ){
    printf("Error truncating blocks in trunc2\n");
    return -1;
  }
  
  truncFile.inode.blocksFileSize = (truncFile.currentPointer)/bytesInBlock;/*Remaining blocks*/
  if( (truncFile.currentPointer)%bytesInBlock != 0 )
    truncFile.inode.blocksFileSize++;
  truncFile.inode.bytesFileSize = truncFile.currentPointer;/*New bytes file size*/
  
  if( setInode(truncFile.inode, truncFile.numInode) ){
    printf("Error setting inode in truncate2\n");
    return -1;
  }
}

int seek2 (FILE2 handle, DWORD offset){
	if(offset > ((superblock.blockSize*SECTOR_SIZE)*2)+PointersInBlock*((superblock.blockSize*SECTOR_SIZE)+(PointersInBlock*(superblock.blockSize*SECTOR_SIZE)))){	//tamanho maximo de um arquivo no T2FS
	printf("ERROR, offset is bigger than bytes supported in any file or directory! (function: seek2) \n");
	return -1;
	}

	if(offset == -1){
		openedFiles[handle].currentPointer = openedFiles[handle].inode.bytesFileSize + 1;
	}else{
		openedFiles[handle].currentPointer = offset;
	}
	return 0;
}

int mkdir2 (char *pathname){
	fileHandler file;
	struct coordinates info;
	int d=0;
	char abspath[MAX_PATH_NAME_SIZE];


	if(!systemReady)
		setup();
	info = getReg(pathname);
	if(info.record.TypeVal == TYPEVAL_INVALIDO){ //nome valido, nao utilizado ainda
		struct t2fs_inode newFileInode;
		int inodeNum;

		newFileInode.blocksFileSize = 0;
		newFileInode.bytesFileSize = 0;
		newFileInode.dataPtr[0] = INVALID_PTR;
		newFileInode.dataPtr[1] = INVALID_PTR;
		newFileInode.singleIndPtr = INVALID_PTR;
		newFileInode.doubleIndPtr = INVALID_PTR;
		inodeNum = searchBitmap2(BITMAP_INODE, 0);
		setInode(newFileInode, inodeNum);

		struct t2fs_record newReg;
		char *token;
		char lastoken[59];
		char *auxpath = malloc(strlen(filename)+1);

		//nome é só o ultimo argumento do filename
		newReg.TypeVal = TYPEVAL_DIRETORIO;
		token = strtok(auxpath, "/");
		strcpy(lastoken, token);
		while(token!=NULL){
			token = strtok(NULL, "/");
			strcpy(lastoken, token);
		}

		strcpy(newReg.name[59], lastoken);
		newReg.inodeNumber = inodeNum;

		if(setReg(newReg, pathname)){
			printf("ERROR, could not create new record inside directory (function: create2) \n");
			return -1;
		}	
		return 0;
	}else{
		printf("ERROR, there are other directory(s) with the same name in this directory! (function: create2)\n");
		return -1;
	}
}

int rmdir2 (char *pathname){
	/* TO-DO */
}

int getcwd2 (char *pathname, int size){
	
	if(size < strlen(currentDir.pathName)+1){
		printf("ERROR, insufficient size! (function: getcwd2) \n");
		return -1;
	}else{
		strncpy(pathname, currentDir.pathName, size*sizeof(char));
		return 0;
	}
	//TIRA A MAO QUE EU TO FAZENDO
}

DIR2 opendir2 (char *pathname){
	struct coordinates reg;
	struct t2fs_inode inode;
	char *abspath;
	
	
  reg = getReg(pathname);
	
	if(reg.record.TypeVal == TYPEVAL_INVALIDO){
			printf("ERROR: file not found!\n");
			return -1;
	}

	int i=0;
	//searches for the next free openedFiles
	while((i<10) && (openedFiles[i].type == TYPEVAL_INVALIDO))
		i++;

	if(i >= 10){
		printf("ERROR: openedFiles is full!\n");
		return -1;
	}
	
	if(absolutePath(abspath, pathname)){
		printf("ERROR, could not convert pathname to absolutePath! (function: open2) \n");
		return -1;
	}
	strcpy(openedFiles[i].fullPathName, abspath);	
	openedFiles[i].type = TYPEVAL_DIRETORIO;
	openedFiles[i].currentPointer = 0;
	inode = getInode(reg.record.inodeNumber);
	openedFiles[i].inode = inode;
	openedFiles[i].numInode = reg.record.inodeNumber;
	
	return i;
}

int readdir2 (DIR2 handle, DIRENT2 *dentry){
	/* TO-DO */
}

int closedir2 (DIR2 handle){
	fileHandler *file;
	file = &(openedFiles[handle]);

	if (file->type != TYPEVAL_DIRETORIO){
			printf("ERROR: handle file not found!\n");
			return -1;
	}

	file->fullPathName[0] = '\0';
	file->type = TYPEVAL_INVALIDO;
	return 0;
}
